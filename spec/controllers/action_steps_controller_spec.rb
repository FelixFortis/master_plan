require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ActionStepsController, type: :controller do

  login_user
  before(:each) {@user = subject.current_user}
  before(:each) {@user.projects.create!(title: 'bake a PIZZA', due_date: Date.tomorrow, description: "Learn to bake my favourite PIZZA - PEPPERONI!")}
  before(:each) {@project = @user.projects.first}

  # This should return the minimal set of attributes required to create a valid
  # ActionStep. As you add validations to ActionStep, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {title: 'bake a pie', due_date: Date.tomorrow, description: "Learn to bake my favourite pie - apple!"}
  }
  let(:invalid_attributes) {
    {title: 'bake a pie', due_date: Date.tomorrow, description: ""}
  }

  describe "GET #index" do
    it "assigns all action_steps as @action_steps" do
      action_step = @project.action_steps.create! valid_attributes
      get :index, {project_id: @project.id}
      expect(assigns(:action_steps)).to eq([action_step])
    end
  end

  describe "GET #show" do
    it "assigns the requested action_step as @action_step" do
      action_step = @project.action_steps.create! valid_attributes
      get :show, {:id => action_step.to_param, project_id: @project.id}
      expect(assigns(:action_step)).to eq(action_step)
    end
  end

  describe "GET #new" do
    it "assigns a new action_step as @action_step" do
      get :new, {project_id: @project.id}
      expect(assigns(:action_step)).to be_a_new(ActionStep)
    end
  end

  describe "GET #edit" do
    it "assigns the requested action_step as @action_step" do
      action_step = @project.action_steps.create! valid_attributes
      get :edit, {:id => action_step.to_param, project_id: @project.id}
      expect(assigns(:action_step)).to eq(action_step)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new ActionStep" do
        expect {
          post :create, {:action_step => valid_attributes, project_id: @project.id}
        }.to change(ActionStep, :count).by(1)
      end

      it "assigns a newly created action_step as @action_step" do
        post :create, {:action_step => valid_attributes, project_id: @project.id}
        expect(assigns(:action_step)).to be_a(ActionStep)
        expect(assigns(:action_step)).to be_persisted
      end

      it "redirects to the created action_step" do
        post :create, {:action_step => valid_attributes, project_id: @project.id}
        expect(response).to redirect_to(project_action_step_path(@project, @project.action_steps.last))
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved action_step as @action_step" do
        post :create, {:action_step => invalid_attributes, project_id: @project.id}
        expect(assigns(:action_step)).to be_a_new(ActionStep)
      end

      it "re-renders the 'new' template" do
        post :create, {:action_step => invalid_attributes, project_id: @project.id}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {title: 'bake a CRUMBLE', due_date: 2.days.from_now, description: "Learn to bake my favourite CRUMBLE - RHUBARB!"}
      }

      it "updates the requested action_step" do
        action_step = @project.action_steps.create! valid_attributes
        put :update, {:id => action_step.to_param, :action_step => new_attributes, project_id: @project.id}
        action_step.reload
        expect(action_step.attributes[:title]).to eq(new_attributes["title"])
        expect(action_step.attributes[:due_date]).to eq(new_attributes["due_date"])
        expect(action_step.attributes[:description]).to eq(new_attributes["description"])
      end

      it "assigns the requested action_step as @action_step" do
        action_step = @project.action_steps.create! valid_attributes
        put :update, {:id => action_step.to_param, :action_step => valid_attributes, project_id: @project.id}
        expect(assigns(:action_step)).to eq(action_step)
      end

      it "redirects to the action_step" do
        action_step = @project.action_steps.create! valid_attributes
        put :update, {:id => action_step.to_param, :action_step => valid_attributes, project_id: @project.id}
        expect(response).to redirect_to(project_action_step_url(@project, action_step))
      end
    end

    context "with invalid params" do
      it "assigns the action_step as @action_step" do
        action_step = @project.action_steps.create! valid_attributes
        put :update, {:id => action_step.to_param, :action_step => invalid_attributes, project_id: @project.id}
        expect(assigns(:action_step)).to eq(action_step)
      end

      it "re-renders the 'edit' template" do
        action_step = @project.action_steps.create! valid_attributes
        put :update, {:id => action_step.to_param, :action_step => invalid_attributes, project_id: @project.id}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested action_step" do
      action_step = @project.action_steps.create! valid_attributes
      expect {
        delete :destroy, {:id => action_step.to_param, project_id: @project.id}
      }.to change(ActionStep, :count).by(-1)
    end

    it "redirects to the action_steps list" do
      action_step = @project.action_steps.create! valid_attributes
      delete :destroy, {:id => action_step.to_param, project_id: @project.id}
      expect(response).to redirect_to(project_action_steps_url(@project))
    end
  end

end
